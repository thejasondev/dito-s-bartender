---
import { Icon } from 'astro-icon/components';

const navItems = [
  { name: 'Home', url: '/' },
  { name: 'Services', url: '/services' },
  { name: 'About', url: '/about' },
  { name: 'Gallery', url: '/gallery' },
  { name: 'FAQ', url: '/faq' },
  { name: 'Contact', url: '/contact', highlight: true },
];

const currentPath = Astro.url.pathname;
---

<header class="fixed w-full bg-white/90 backdrop-blur-sm z-50 shadow-sm">
  <div class="container mx-auto px-4 py-3">
    <div class="flex justify-between items-center">
      <a href="/" class="flex items-center gap-2">
        <span class="text-2xl font-bold text-primary">Dito's</span>
        <span class="text-xl font-semibold text-secondary">Bartender</span>
      </a>
      
      <!-- Mobile menu button -->
      <button 
        id="menu-toggle" 
        class="lg:hidden text-gray-700 focus:outline-none"
        aria-expanded="false"
        aria-label="Toggle navigation menu"
        aria-controls="mobile-menu"
      >
        <Icon name="mdi:menu" class="w-8 h-8" id="menu-open-icon" />
        <Icon name="mdi:close" class="w-8 h-8 hidden" id="menu-close-icon" />
      </button>
      
      <!-- Desktop navigation -->
      <nav class="hidden lg:flex items-center space-x-6">
        {navItems.map(item => (
          <a 
            href={item.url} 
            class:list={[
              'transition duration-300 hover:text-primary relative py-2',
              { 
                'text-primary font-medium': currentPath === item.url,
                'font-medium text-white bg-primary px-4 py-2 rounded-md hover:bg-primary-dark': item.highlight
              }
            ]}
          >
            {item.name}
            {currentPath === item.url && !item.highlight && (
              <span class="absolute bottom-0 left-0 w-full h-0.5 bg-primary"></span>
            )}
          </a>
        ))}
      </nav>
    </div>
  </div>
  
  <!-- Mobile navigation -->
  <nav 
    id="mobile-menu" 
    class="lg:hidden bg-white w-full border-t max-h-0 overflow-hidden transition-all duration-300 ease-in-out"
    aria-hidden="true"
  >
    <div class="container mx-auto px-4 py-2">
      <ul class="flex flex-col space-y-2">
        {navItems.map(item => (
          <li>
            <a 
              href={item.url} 
              class:list={[
                'block py-2 px-4 transition duration-300',
                { 
                  'text-primary font-medium': currentPath === item.url,
                  'font-medium text-white bg-primary rounded-md hover:bg-primary-dark': item.highlight
                }
              ]}
            >
              {item.name}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOpenIcon = document.getElementById('menu-open-icon');
    const menuCloseIcon = document.getElementById('menu-close-icon');
    
    if (menuToggle && mobileMenu && menuOpenIcon && menuCloseIcon) {
      // Funcionalidad del menú móvil
      menuToggle.addEventListener('click', () => {
        const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
        
        // Actualizar el estado del botón
        menuToggle.setAttribute('aria-expanded', !isExpanded ? 'true' : 'false');
        mobileMenu.setAttribute('aria-hidden', isExpanded ? 'true' : 'false');
        
        // Cambiar iconos y visibilidad
        menuOpenIcon.classList.toggle('hidden');
        menuCloseIcon.classList.toggle('hidden');
        
        // Animar la altura del menú
        if (isExpanded) {
          mobileMenu.style.maxHeight = '0';
        } else {
          mobileMenu.style.maxHeight = mobileMenu.scrollHeight + 'px';
        }
      });
      
      // Cerrar el menú cuando se hace clic en un enlace
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          menuToggle.setAttribute('aria-expanded', 'false');
          mobileMenu.setAttribute('aria-hidden', 'true');
          menuOpenIcon.classList.remove('hidden');
          menuCloseIcon.classList.add('hidden');
          mobileMenu.style.maxHeight = '0';
        });
      });
      
      // Cerrar el menú cuando se redimensiona a desktop
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1024) {
          menuToggle.setAttribute('aria-expanded', 'false');
          mobileMenu.setAttribute('aria-hidden', 'true');
          menuOpenIcon.classList.remove('hidden');
          menuCloseIcon.classList.add('hidden');
          mobileMenu.style.maxHeight = '0';
        }
      });
    }
  });
</script>

