---
import { Icon } from 'astro-icon/components';
import LanguageSwitcher from './LanguageSwitcher.astro';
import { getLanguageFromURL } from '../lib/i18n/utils';
import { getTranslations } from '../lib/i18n/translations';

const currentPath = Astro.url.pathname;
const currentLang = getLanguageFromURL(currentPath);
const t = getTranslations(currentLang);

const navItems = [
  { name: t.navigation.home, url: currentLang === 'en' ? '/' : '/es/' },
  { 
    name: t.navigation.services,
    url: '#',
    isDropdownOnly: true,
    submenu: [
      { 
        name: t.navigation.plans, 
        url: currentLang === 'en' ? '/services/plans' : '/es/services/plans' 
      },
      { 
        name: t.navigation.menu, 
        url: currentLang === 'en' ? '/services/menu' : '/es/services/menu' 
      },
      { 
        name: t.navigation.cocktails, 
        url: currentLang === 'en' ? '/services/cocktails' : '/es/services/cocktails' 
      }
    ]
  },
  { name: t.navigation.about, url: currentLang === 'en' ? '/about' : '/es/about' },
  { name: t.navigation.gallery, url: currentLang === 'en' ? '/gallery' : '/es/gallery' },
  { name: t.navigation.faq, url: currentLang === 'en' ? '/faq' : '/es/faq' },
  { name: t.navigation.contact, url: currentLang === 'en' ? '/contact' : '/es/contact' }
];

const socialLinks = [
  { name: 'Instagram', icon: 'mdi:instagram', url: 'https://instagram.com/dito_mobilebar?' },
  { name: 'Facebook', icon: 'mdi:facebook', url: 'https://facebook.com/share/12KUW1sGc7W/?' },
];
---

<header class="fixed w-full bg-white/90 backdrop-blur-sm z-50 shadow-sm">
  <div class="container mx-auto px-4 py-3">
    <div class="flex justify-between items-center">
      <a href={currentLang === 'en' ? '/' : '/es/'} class="flex items-center gap-2">
        <span class="text-2xl font-bold text-primary">Dito's</span>
        <span class="text-xl font-semibold text-secondary">Bartender</span>
      </a>

      <!-- Desktop navigation -->
      <nav class="hidden lg:flex items-center space-x-6">
        {navItems.map(item => (
          <div class="relative group">
            {item.isDropdownOnly ? (
              <button 
                type="button"
                class:list={[
                  'transition duration-300 relative py-2 inline-flex items-center gap-1 cursor-default',
                  { 
                    'text-primary font-medium': item.submenu && item.submenu.some(subItem => currentPath === subItem.url)
                  }
                ]}
              >
                <span>{item.name}</span>
                {item.submenu && (
                  <Icon 
                    name="mdi:chevron-down" 
                    class="w-4 h-4 transform transition-transform duration-300 group-hover:rotate-180" 
                    aria-hidden="true"
                  />
                )}
              </button>
            ) : (
              <a 
                href={item.url}
                class:list={[
                  'transition duration-300 relative py-2 inline-flex items-center gap-1',
                  { 
                    'text-primary font-medium': currentPath === item.url || 
                      (item.url === '/' && currentPath === '') || 
                      (item.url === '/es/' && currentPath === '/es')
                  }
                ]}
              >
                <span>{item.name}</span>
                {item.submenu && (
                  <Icon 
                    name="mdi:chevron-down" 
                    class="w-4 h-4 transform transition-transform duration-300 group-hover:rotate-180" 
                    aria-hidden="true"
                  />
                )}
              </a>
            )}
            
            {item.submenu && (
              <div class="absolute left-0 mt-1 w-56 bg-white rounded-md shadow-lg opacity-0 invisible translate-y-2 group-hover:opacity-100 group-hover:visible group-hover:translate-y-0 transition-all duration-300 z-50">
                <div class="py-2">
                  {item.submenu.map(subItem => (
                    <a
                      href={subItem.url}
                      class:list={[
                        'block px-4 py-2.5 text-sm transition-colors duration-200 hover:bg-primary/5 relative group/item',
                        {
                          'text-primary font-medium': currentPath === subItem.url,
                          'text-gray-700': currentPath !== subItem.url
                        }
                      ]}
                    >
                      <div class="flex items-center justify-between">
                        <span>{subItem.name}</span>
                        <Icon 
                          name="mdi:arrow-right" 
                          class="w-4 h-4 opacity-0 -translate-x-2 group-hover/item:opacity-100 group-hover/item:translate-x-0 transition-all duration-200" 
                        />
                      </div>
                      {currentPath === subItem.url && (
                        <span class="absolute left-0 top-0 bottom-0 w-1 bg-primary rounded-r"></span>
                      )}
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
        
        <LanguageSwitcher />
        
        <a href="tel:+1(727)945-4200" class="font-medium text-white bg-primary px-4 py-2 rounded-md hover:bg-primary-dark transition duration-300 flex items-center gap-1">
          <Icon name="mdi:phone" class="w-4 h-4" />
          <span>{t.navigation.callNow}</span>
        </a>
      </nav>

      <!-- Mobile menu button -->
      <button 
        id="menu-toggle" 
        class="lg:hidden relative z-30 text-gray-700 focus:outline-none"
        aria-expanded="false"
        aria-label="Toggle navigation menu"
        aria-controls="mobile-menu"
      >
        <div class="relative w-8 h-8 flex items-center justify-center">
          <span id="hamburger-top" class="absolute h-0.5 w-6 bg-gray-700 transform transition duration-300 ease-in-out"></span>
          <span id="hamburger-middle" class="absolute h-0.5 w-6 bg-gray-700 transform transition duration-300 ease-in-out"></span>
          <span id="hamburger-bottom" class="absolute h-0.5 w-6 bg-gray-700 transform transition duration-300 ease-in-out"></span>
        </div>
      </button>
    </div>
  </div>
  
  <!-- Mobile navigation overlay -->
  <div 
    id="mobile-menu-overlay" 
    class="lg:hidden fixed inset-0 bg-black/0 backdrop-blur-0 opacity-0 -z-10 transition-all duration-500 ease-in-out"
    aria-hidden="true"
  ></div>

  <!-- Mobile navigation -->
  <nav 
    id="mobile-menu" 
    class="lg:hidden fixed top-0 right-0 h-screen w-3/4 max-w-xs bg-white shadow-2xl transform translate-x-full transition-transform duration-500 ease-in-out z-20 flex flex-col overflow-y-auto"
    aria-hidden="true"
  >
    <div class="p-6 mt-12">
      <div class="flex flex-col space-y-2">
        {navItems.map((item, index) => (
          <div class="mobile-nav-item transform translate-x-8 opacity-0 transition-all duration-300">
            {item.isDropdownOnly ? (
              <div>
                <div
                  class:list={[
                    'w-full flex justify-between items-center py-3 border-b border-gray-100 cursor-default',
                    {
                      'text-primary font-medium': item.submenu && item.submenu.some(subItem => currentPath === subItem.url)
                    }
                  ]}
                  onclick={`document.getElementById('submenu-${index}').classList.toggle('hidden');
                           this.querySelector('.submenu-icon').classList.toggle('rotate-180')`}
                  aria-expanded="false"
                  aria-controls={`submenu-${index}`}
                >
                  <span>{item.name}</span>
                  <Icon name="mdi:chevron-down" class="w-5 h-5 submenu-icon transition-transform duration-300" />
                </div>
                <div id={`submenu-${index}`} class="hidden pl-4 py-2 space-y-2">
                  {item.submenu.map(subItem => (
                    <a
                      href={subItem.url}
                      class:list={[
                        'flex items-center justify-between py-2 text-sm transition-colors duration-200',
                        {
                          'text-primary font-medium': currentPath === subItem.url,
                          'text-gray-700 hover:text-primary': currentPath !== subItem.url
                        }
                      ]}
                    >
                      <span>{subItem.name}</span>
                      <Icon name="mdi:arrow-right" class="w-4 h-4 opacity-50" />
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a 
                href={item.url} 
                class:list={[
                  'block py-3 border-b border-gray-100',
                  { 
                    'text-primary font-medium': currentPath === item.url || 
                      (item.url === '/' && currentPath === '') || 
                      (item.url === '/es/' && currentPath === '/es')
                  }
                ]}
              >
                {item.name}
              </a>
            )}
          </div>
        ))}
      </div>

      <div class="mobile-nav-item transform translate-x-8 opacity-0 transition-all duration-300 delay-400 pt-6">
        <p class="text-xs text-gray-500 mb-2">{t.footer.followUs}</p>
        <div class="flex gap-4">
          {socialLinks.map(link => (
            <a 
              href={link.url}
              target="_blank"
              rel="noopener noreferrer"
              aria-label={link.name}
              class="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-700 hover:bg-primary hover:text-white transition duration-300"
            >
              <Icon name={link.icon} class="w-4 h-4" />
            </a>
          ))}
        </div>
      </div>

      <LanguageSwitcher isMobile={true} />
    </div>

    <div class="mt-auto p-6 border-t border-gray-100">
      <div class="mobile-nav-item transform translate-x-8 opacity-0 transition-all duration-300 delay-500">
        <p class="text-sm text-gray-500 mb-2">{t.footer.needHelp}</p>
        <div class="flex gap-3">
          <a href="tel:+1(727)945-4200" class="flex items-center gap-1 text-primary hover:underline">
            <Icon name="mdi:phone" class="w-4 h-4" />
            <span>{t.footer.call}</span>
          </a>
          <span class="text-gray-300">|</span>
          <a href={`https://wa.me/+17279454200?text=${encodeURIComponent(t.contact.whatsappMessage)}`} class="flex items-center gap-1 text-primary hover:underline">
            <Icon name="mdi:whatsapp" class="w-4 h-4" />
            <span>{t.footer.message}</span>
          </a>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileOverlay = document.getElementById('mobile-menu-overlay');
    const hamburgerTop = document.getElementById('hamburger-top');
    const hamburgerMiddle = document.getElementById('hamburger-middle');
    const hamburgerBottom = document.getElementById('hamburger-bottom');
    const mobileNavItems = document.querySelectorAll('.mobile-nav-item');
    
    // Inicializar hamburger
    if (hamburgerTop && hamburgerMiddle && hamburgerBottom) {
      hamburgerTop.setAttribute('style', 'transform: translateY(-6px)');
      hamburgerBottom.setAttribute('style', 'transform: translateY(6px)');
    }
    
    if (menuToggle && mobileMenu && mobileOverlay && hamburgerTop && hamburgerMiddle && hamburgerBottom) {
      // Funcionalidad del menú móvil
      menuToggle.addEventListener('click', () => {
        const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
        
        // Actualizar el estado del botón
        menuToggle.setAttribute('aria-expanded', !isExpanded ? 'true' : 'false');
        mobileMenu.setAttribute('aria-hidden', isExpanded ? 'true' : 'false');
        
        // Animar el menú y overlay
        if (isExpanded) {
          // Cerrar el menú
          mobileMenu.setAttribute('style', 'transform: translateX(100%)');
          mobileOverlay.setAttribute('style', 'opacity: 0; backdrop-filter: blur(0px); background-color: rgba(0, 0, 0, 0); z-index: -10');
          document.body.classList.remove('overflow-hidden');
          
          // Animar los items de vuelta
          mobileNavItems.forEach(item => {
            item.setAttribute('style', 'transform: translateX(2rem); opacity: 0');
          });
          
          // Animar hamburger a estado inicial
          hamburgerTop.setAttribute('style', 'transform: translateY(-6px) rotate(0deg)');
          hamburgerMiddle.setAttribute('style', 'opacity: 1');
          hamburgerBottom.setAttribute('style', 'transform: translateY(6px) rotate(0deg)');
        } else {
          // Abrir el menú
          mobileMenu.setAttribute('style', 'transform: translateX(0)');
          mobileOverlay.setAttribute('style', 'opacity: 1; backdrop-filter: blur(4px); background-color: rgba(0, 0, 0, 0.5); z-index: 10');
          document.body.classList.add('overflow-hidden');
          
          // Animar los items uno por uno
          setTimeout(() => {
            mobileNavItems.forEach((item, index) => {
              setTimeout(() => {
                item.setAttribute('style', 'transform: translateX(0); opacity: 1');
              }, index * 50);
            });
          }, 200);
          
          // Animar hamburger a X
          hamburgerTop.setAttribute('style', 'transform: translateY(0) rotate(45deg)');
          hamburgerMiddle.setAttribute('style', 'opacity: 0');
          hamburgerBottom.setAttribute('style', 'transform: translateY(0) rotate(-45deg)');
        }
      });

      // Cerrar el menú al hacer clic en el overlay
      mobileOverlay.addEventListener('click', () => {
        menuToggle.click();
      });
      
      // Cerrar el menú cuando se hace clic en un enlace que no tiene submenú
      const mobileLinks = mobileMenu.querySelectorAll('a:not([data-has-submenu])');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          menuToggle.click();
        });
      });
      
      // Cerrar el menú cuando se redimensiona a desktop
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 1024 && menuToggle.getAttribute('aria-expanded') === 'true') {
          menuToggle.click();
        }
      });
    }
  });
</script>

