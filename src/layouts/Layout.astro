---
import { ViewTransitions } from 'astro:transitions';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import GoogleAnalytics from '../components/GoogleAnalytics.astro';

interface Props {
	title: string;
	description?: string;
	image?: string;
	canonicalURL?: string;
	googleVerification?: string;
	preloadHeroImage?: boolean;
}

const { 
	title = "Dito's Bartender", 
	description = "Professional mobile bartending service for all types of events. Custom cocktails, themed bars, and unique experiences.",
	image = "/web-app-manifest-512x512.png",
	canonicalURL = Astro.url.href,
	googleVerification = 'A7BT_C6ClgkaWHA9brgG3v0v7gG-1NeclQ6jCfvQF8U',
	preloadHeroImage = false
} = Astro.props;

// Construir URLs absolutas para las imágenes
const siteUrl = Astro.site || new URL(Astro.url.pathname, Astro.url.origin).href;
const absoluteImageUrl = new URL(image.startsWith('/') ? image : `/${image}`, siteUrl).href;
const logoUrl = new URL('/web-app-manifest-512x512.png', siteUrl).href;

// Determinar si es la página principal para precargar imágenes del héroe
const isHomePage = Astro.url.pathname === '/' || Astro.url.pathname === '';
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		
		<!-- Favicons -->
		<link rel="icon" href="/favicon.ico" sizes="any" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
		<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
		<link rel="manifest" href="/site.webmanifest" />
		<meta name="msapplication-TileImage" content={logoUrl} />
		<meta name="msapplication-TileColor" content="#D4AF37" />
		<meta name="theme-color" content="#D4AF37" />
		
		<!-- Específico para Google -->
		<meta itemprop="name" content={title} />
		<meta itemprop="description" content={description} />
		<meta itemprop="image" content={logoUrl} />
		
		<meta name="generator" content={Astro.generator} />
		{googleVerification && <meta name="google-site-verification" content={googleVerification} />}
		<title>{title}</title>
		<link rel="canonical" href={canonicalURL} />
		<ViewTransitions />
		
		<!-- Precargar imágenes críticas en la página principal -->
		{isHomePage && (
			<>
				<link rel="preload" as="image" href="/images/header-placeholder.webp" fetchpriority="high" />
				<link 
					rel="preload" 
					as="image" 
					href="/images/header-small.webp" 
					media="(max-width: 640px)" 
					fetchpriority="high" 
				/>
				<link 
					rel="preload" 
					as="image" 
					href="/images/header-medium.webp" 
					media="(min-width: 641px) and (max-width: 1024px)" 
					fetchpriority="high" 
				/>
				<link 
					rel="preload" 
					as="image" 
					href="/images/header.webp" 
					media="(min-width: 1025px)" 
					fetchpriority="high" 
				/>
			</>
		)}
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={absoluteImageUrl} />
		<meta property="og:image:alt" content={`${title} logo`} />
		<meta property="og:image:width" content="512" />
		<meta property="og:image:height" content="512" />
		<meta property="og:site_name" content={title} />
		<meta property="og:locale" content="en_US" />
		
		<!-- Twitter -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:url" content={canonicalURL} />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={absoluteImageUrl} />
		<meta name="twitter:image:alt" content={`${title} logo`} />
		
		<!-- Metadatos estructurados para Rich Snippets -->
		<script type="application/ld+json">
			{
				"@context": "https://schema.org",
				"@type": "LocalBusiness",
				"name": "Dito's Bartender",
				"description": "${description}",
				"image": "${absoluteImageUrl}",
				"url": "${canonicalURL}",
				"logo": "${logoUrl}",
				"telephone": "+17279454200",
				"address": {
					"@type": "PostalAddress",
					"addressLocality": "Dunedin, FL",
					"addressRegion": "FL",
					"addressCountry": "US"
				},
				"priceRange": "$$",
				"servesCuisine": "Cocktails",
				"sameAs": [
					"https://www.facebook.com/share/12KUW1sGc7W/?",
					"https://www.instagram.com/dito_mobilebar?"
				]
			}
		</script>
		
		<!-- Google Analytics -->
		<GoogleAnalytics />
		
		<!-- Slot para metaetiquetas personalizadas por página -->
		<slot name="head" />
	</head>
	<body class="bg-white text-gray-800 font-sans min-h-screen flex flex-col">
		<Header />
		<main class="flex-grow">
			<slot />
		</main>
		<Footer />

		<script>
			// Script para animaciones al hacer scroll
			document.addEventListener('astro:page-load', () => {
				const scrollElements = document.querySelectorAll('.scroll-trigger');
				
				const elementInView = (el: Element, percentageScroll = 100) => {
					const elementTop = el.getBoundingClientRect().top;
					const elementHeight = el.getBoundingClientRect().height;
					const windowHeight = window.innerHeight;
					
					const thresholdPixels = (windowHeight * percentageScroll) / 100;
					
					return elementTop <= windowHeight - thresholdPixels && 
							elementTop > -elementHeight;
				};
				
				const displayScrollElement = (element: Element) => {
					element.classList.add('scroll-visible');
				};
				
				const hideScrollElement = (element: Element) => {
					element.classList.remove('scroll-visible');
				};
				
				const handleScrollAnimation = () => {
					scrollElements.forEach((el) => {
						if (elementInView(el, 25)) {
							displayScrollElement(el);
						} else {
							hideScrollElement(el);
						}
					});
				};
				
				// Solo activar animaciones si el usuario no prefiere movimiento reducido
				const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
				
				if (!prefersReducedMotion) {
					window.addEventListener('scroll', () => {
						handleScrollAnimation();
					});
					
					// Inicializar para elementos visibles en la carga
					handleScrollAnimation();
				} else {
					// Si prefiere movimiento reducido, mostrar todo sin animaciones
					scrollElements.forEach(el => {
						el.classList.add('scroll-visible');
					});
				}
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--accent: 124, 58, 237;
		--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
	}
	html {
		scroll-behavior: smooth;
		overflow-x: hidden; /* Prevenir scroll horizontal */
	}
	body {
		font-family: 'Poppins', sans-serif;
		overflow-x: hidden; /* Asegurar que no haya scroll horizontal */
		max-width: 100%;
	}
	h1, h2, h3, h4, h5, h6 {
		font-family: 'Playfair Display', serif;
	}

	/* Barra de desplazamiento personalizada */
	::-webkit-scrollbar {
		width: 10px;
	}
	
	::-webkit-scrollbar-track {
		background: #f1f1f1;
	}
	
	::-webkit-scrollbar-thumb {
		background: theme('colors.primary.DEFAULT');
		border-radius: 5px;
	}
	
	::-webkit-scrollbar-thumb:hover {
		background: theme('colors.primary.dark');
	}

	/* Mejora de accesibilidad para foco en enlaces */
	a:focus-visible {
		outline: 2px solid theme('colors.primary.DEFAULT');
		outline-offset: 2px;
		border-radius: 2px;
	}
</style>


